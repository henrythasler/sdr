#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Decode Symbols"""

from struct import pack
import numpy as np

"""
$ sudo python3 transmitter.py prog
key: 0xA0, ctrl: 0x08, rolling code: 0x1140, address: 0x365FC0
cksum: 5
Data:       0xA0 0x85 0x11 0x40 0xC0 0x5F 0x36 
obfuscated: 0xA0 0x25 0x34 0x74 0xB4 0xEB 0xDD 

extract 112 symbols via inspectrum
"""
#symbols = np.array([-0.978973, 1.17879, 2.16441, -0.967268, -0.982979, 1.37306, 2.51, -0.999145, 1.4218, -0.954867, 2.83086, -0.969731, 1.15073, -0.983953, 3.25464, -0.998677, 1.11787, -0.99313, 3.25513, -0.989338, -0.978772, 2.40098, 3.29982, -0.984729, 1.50293, -0.986528, -0.963995, 1.20755, 1.59645, -0.99533, -0.985346, 1.18317, 1.64338, -0.995102, 2.13389, -0.982879, -0.993841, 3.24691, -0.992873, 1.20331, 2.66343, -0.952425, -0.987252, 1.20161, 2.59331, -0.969275, 1.38687, -0.997695, 2.98722, -0.9972, -0.998467, 1.6104, -0.963154, 2.09193, -0.930562, 1.8342, 3.27179, -0.999958, -0.984508, 1.88797, 3.37359, -0.942826, 1.2013, -0.943561, -0.933611, 1.35861, 1.24165, -0.998798, -0.990742, 1.35632, -0.999038, 3.02884, 2.40309, -0.997628, -0.935958, 3.30769, 2.30419, -0.9832, 1.63471, -0.975439, -0.948221, 1.15124, -0.984419, 3.24191, -0.977503, 1.12283, 2.38821, -0.975889, -0.978687, 1.41261, 2.46522, -0.985991, -0.999118, 1.39793, -0.972895, 2.56144, -0.951851, 1.53168, -0.971966, 2.53196, 1.16685, -0.965457, -0.998545, 1.80703, -0.996224, 2.01978, -0.99918, 2.01255, 1.12455, -0.96652, -0.960314, 1.72671])


"""
$ sudo python3 transmitter.py prog
key: 0xA0, ctrl: 0x08, rolling code: 0x280B, address: 0x365FC0
cksum: 11
Data: 0xAB 0x8B 0x28 0x0B 0xC0 0x5F 0x36 
Frame: 0xAB 0x20 0x08 0x03 0xC3 0x9C 0xAA 

extract 112 symbols via inspectrum
"""
symbols = np.array([-0.996324, 1.46074, 1.54346, -0.989677, -0.997173, 1.27211, 1.28257, -0.996447, -0.974467, 1.12337, 1.68062, -0.997753, -0.990801, 1.13568, -0.998708, 3.27445, 1.42267, -0.987584, 2.95462, -0.9993, -0.997706, 1.45394, 2.91369, -0.997396, 1.27988, -0.994055, 3.25009, -0.998595, 1.1263, -0.997751, 3.28772, -0.98449, 1.12445, -0.997068, 3.31228, -0.999819, 1.23419, -0.999991, 3.04226, -0.981973, -0.997808, 2.81358, 2.73278, -0.990939, 1.63665, -0.987866, 2.25291, -0.990612, 1.54157, -0.976629, 1.83111, -0.99203, 2.00578, -0.993712, 1.48322, -0.977456, 2.30718, -0.973853, 1.3377, -0.990217, -0.988449, 2.96246, -0.993823, 1.55919, -0.999615, 2.44686, -0.988506, 1.35972, 3.29331, -0.979775, 1.15783, -0.999784, 3.30921, -0.983678, 1.17926, -0.998273, -0.98802, 1.4244, -0.991124, 2.46272, -0.989335, 1.60934, 1.41111, -0.995464, 2.77756, -0.998635, -0.983935, 3.14606, -0.996933, 1.16947, -0.960283, 3.3251, 1.96386, -0.963732, 2.13317, -0.995038, -0.989562, 1.2131, 2.14508, -0.99876, -0.986394, 1.29637, 2.82032, -0.97897, -0.999661, 1.24119, 2.93901, -0.99517, -0.99376, 1.4389, 3.26165, -0.99096])

# ref_stop
#symbols = np.array([-0.936753, 2.69254, 1.66064, -0.999912, -0.992612, 2.97504, 2.96881, -0.961265, -0.995933, 2.75673, 2.96259, -0.949326, -0.941343, 1.28542, 1.8612, -0.93519, -0.841831, 2.05241, 2.15033, -0.967295, -0.970054, 1.64254, -0.992417, 2.96259, 2.6695, -0.957847, 2.81012, -0.902378, -0.997886, 1.14481, 1.08681, -0.938999, -0.99459, 2.31801, 1.95692, -0.990366, 1.73161, -0.998276, -0.982554, 2.75673, -0.983555, 1.08681, 1.03346, -0.996812, -0.983896, 0.997159, 1.14303, -0.984873, -0.985972, 2.19225, 1.97887, -0.982163, 2.60692, -0.967637, -0.993101, 1.05551, 1.10788, -0.897764, 1.20905, -0.988975, 1.00661, -0.980381, 2.96881, -0.997178, 2.17428, -0.95687, 2.91322, -0.925034, -0.971128, 0.989102, 1.06129, -0.985581, -0.941636, 0.996133, -0.970273, 2.64145, 2.97504, -0.966318, -0.98873, 1.63896, 1.2976, -0.996812, -0.996128, 1.79635, -0.989194, 1.02533, -0.963999, 2.55729, 2.70456, -0.959043, 2.58446, -0.996396, -0.997593, 1.01825, 0.981314, -0.971006, 2.97504, -0.893296, -0.984922, 1.1237, 1.0101, -0.897422, 2.2977, -0.968882, 1.8778, -0.996152, -0.997397, 1.26962, 1.32526, -0.977451, 1.49379, -0.998594])

convert_symbols = np.vectorize(lambda x: 1 if x > 0 else 0)
manchester = convert_symbols(symbols)

bits = np.zeros(len(manchester) >> 1, dtype=np.uint8)
for i in range(0, len(manchester), 2):
    bits[i>>1] = 1 if manchester[i] == 0 and manchester[i + 1] == 1 else 0

print("Bits: {} ({})".format(len(bits), bits))
Payload = np.packbits(bits)
print("Payload: "+''.join('0x{:02X} '.format(x) for x in Payload))

frame = np.zeros(7, dtype=np.uint8)
# de-obfuscation
frame[0] = Payload[0]
for i in range(1, 7):
    frame[i] = Payload[i] ^ Payload[i-1]

#print("Frame: "+''.join('0x{:02X} '.format(x) for x in frame))

# checksum calculation
cksum = 0
for i in range(0,7):
    cksum = cksum ^ frame[i] ^ (frame[i] >> 4)
cksum = cksum & 0xf

print("Frame: "+''.join('0x{:02X} '.format(x) for x in frame))
print("    Checksum: {}".format("ok" if cksum==0 else "error"))
print("    Key: 0x{:02X}".format(frame[0]))
print("    Control: 0x{:02X}".format((frame[1] >> 4) & 0x0f))
print("    Rolling Code: 0x"+''.join('{:02X}'.format(x) for x in frame[2:4]))
print("    Address: 0x"+''.join('{:02X}'.format(x) for x in frame[7:3:-1]))
